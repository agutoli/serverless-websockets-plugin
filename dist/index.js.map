{"version":3,"sources":["../src/index.js"],"names":["require","is","map","all","filter","keys","isEmpty","flatten","chalk","ServerlessWebsocketsPlugin","serverless","options","provider","getProvider","authorizers","functions","hooks","deployWebsockets","bind","removeWebsockets","displayWebsockets","service","websocketApiName","String","getStage","websocketApiRouteSelectionExpression","apiId","region","stage","apiName","getWebsocketApiName","routeSelectionExpression","getWebsocketApiRouteSelectionExpression","getRegion","init","prepareFunctions","Object","length","cli","log","createApi","clearRoutes","clearAuthorizers","clearIntegrations","createAuthorizers","createRoutes","createDeployment","getWebsocketUrl","request","StackName","naming","getStackName","res","outputs","Stacks","Outputs","name","func","events","find","event","websocket","outputKey","getLambdaVersionOutputLogicalId","arn","output","OutputKey","OutputValue","routes","e","authorizer","authorizerOutputKey","identitySource","trim","split","routeKey","fn","push","apis","websocketApi","Items","api","Name","ApiId","getApi","params","ProtocolType","RouteSelectionExpression","IntegrationMethod","IntegrationType","IntegrationUri","IntegrationId","functionName","accountId","Action","FunctionName","Principal","SourceArn","StatementId","catch","providerError","code","routeId","routeResponseKey","RouteId","RouteResponseKey","integrationId","route","RouteKey","Target","AuthorizationType","AuthorizerId","authorizerId","routeResponseSelectionExpression","RouteResponseSelectionExpression","createRouteResponse","AuthorizerType","AuthorizerUri","IdentitySource","authorizerPromises","authorizerName","addPermission","createAuthorizer","integration","integrationsPromises","createIntegration","routesPromises","createRoute","DeploymentId","StageName","baseUrl","consoleLog","yellow","module","exports"],"mappings":"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","sourcesContent":["const { is, map, all, filter, keys, isEmpty, flatten } = require('@serverless/utils')\nconst chalk = require('chalk')\n\nclass ServerlessWebsocketsPlugin {\n  constructor(serverless, options) {\n    this.serverless = serverless\n    this.options = options\n    this.provider = this.serverless.getProvider('aws')\n\n    this.authorizers = {} // to be filled later...\n    this.functions = [] // to be filled later...\n\n    this.hooks = {\n      'after:deploy:deploy': this.deployWebsockets.bind(this), // todo change\n      'after:remove:remove': this.removeWebsockets.bind(this),\n      'after:info:info': this.displayWebsockets.bind(this)\n    }\n  }\n\n  getWebsocketApiName() {\n    if (\n      this.serverless.service.provider.websocketApiName &&\n      is(String, this.serverless.service.provider.websocketApiName)\n    ) {\n      return `${this.serverless.service.provider.websocketApiName}`\n    }\n    return `${this.serverless.service.service}-${this.provider.getStage()}-websockets-api`\n  }\n\n  getWebsocketApiRouteSelectionExpression() {\n    if (\n      this.serverless.service.provider.websocketApiRouteSelectionExpression &&\n      is(String, this.serverless.service.provider.websocketApiRouteSelectionExpression)\n    ) {\n      return `${this.serverless.service.provider.websocketApiRouteSelectionExpression}`\n    }\n    return `$request.body.action`\n  }\n\n  getWebsocketUrl() {\n    return `wss://${this.apiId}.execute-api.${this.region}.amazonaws.com/${this.stage}/`\n  }\n\n  init() {\n    this.apiName = this.getWebsocketApiName()\n    this.routeSelectionExpression = this.getWebsocketApiRouteSelectionExpression()\n    this.stage = this.provider.getStage()\n    this.region = this.provider.getRegion()\n  }\n\n  async deployWebsockets() {\n    this.init()\n    await this.prepareFunctions()\n    if (\n      !is(Object, this.serverless.service.functions) ||\n      keys(this.serverless.service.functions).length === 0 ||\n      isEmpty(this.functions)\n    ) {\n      return\n    }\n    this.serverless.cli.log(`Deploying Websockets API named \"${this.apiName}\"...`)\n    await this.createApi()\n    // We clear routes before deploying the new routes for idempotency\n    // since we lost the idempotency feature of CF\n    await this.clearRoutes()\n    await this.clearAuthorizers()\n    await this.clearIntegrations()\n    await this.createAuthorizers()\n    await this.createRoutes()\n    await this.createDeployment()\n    this.serverless.cli.log(\n      `Websockets API named \"${this.apiName}\" with ID \"${this.apiId}\" has been deployed.`\n    )\n    this.serverless.cli.log(`  Websocket URL: ${this.getWebsocketUrl()}`)\n  }\n\n  async prepareFunctions() {\n    // get a list of CF outputs...\n    const res = await this.provider.request('CloudFormation', 'describeStacks', {\n      StackName: this.provider.naming.getStackName()\n    })\n    const outputs = res.Stacks[0].Outputs\n\n    keys(this.serverless.service.functions || {}).map((name) => {\n      const func = this.serverless.service.functions[name]\n      if (func.events && func.events.find((event) => event.websocket)) {\n        // find the arn of this function in the list of outputs...\n        const outputKey = this.provider.naming.getLambdaVersionOutputLogicalId(name)\n        const arn = outputs.find((output) => output.OutputKey === outputKey).OutputValue\n\n        // get list of route keys configured for this function\n        const routes = map((e) => {\n          if (e.websocket.authorizer && e.websocket.authorizer.name && !this.authorizers[e.websocket.authorizer.name]) {\n            const authorizerOutputKey = this.provider.naming.getLambdaVersionOutputLogicalId(e.websocket.authorizer.name)\n            const authorizer =\n            {\n              arn: e.websocket.authorizer.arn,\n              identitySource: e.websocket.authorizer.identitySource,\n              name: e.websocket.authorizer.name\n            }\n            if (!authorizer.arn) {\n              authorizer.arn = outputs.find((output) => output.OutputKey === authorizerOutputKey).OutputValue\n            }\n            if (typeof authorizer.identitySource == 'string') {\n              authorizer.identitySource = map((identitySource) => identitySource.trim(), authorizer.identitySource.split(','))\n            }\n            this.authorizers[e.websocket.authorizer.name] = authorizer;\n          }\n          return e.websocket\n        }, filter((e) => e.websocket && e.websocket.routeKey, func.events))\n\n        const fn = {\n          arn: arn,\n          routes\n        }\n        this.functions.push(fn)\n      }\n    })\n  }\n\n  async getApi() {\n    const apis = await this.provider.request('ApiGatewayV2', 'getApis', {})\n    // todo what if existing api is not valid websocket api? or non existent?\n    const websocketApi = apis.Items.find((api) => api.Name === this.apiName)\n    this.apiId = websocketApi ? websocketApi.ApiId : null\n    return this.apiId\n  }\n\n  async createApi() {\n    await this.getApi()\n    if (!this.apiId) {\n      const params = {\n        Name: this.apiName,\n        ProtocolType: 'WEBSOCKET',\n        RouteSelectionExpression: this.routeSelectionExpression\n      }\n\n      const res = await this.provider.request('ApiGatewayV2', 'createApi', params)\n      this.apiId = res.ApiId\n    }\n    return this.apiId\n  }\n\n  async createIntegration(arn) {\n    const params = {\n      ApiId: this.apiId,\n      IntegrationMethod: 'POST',\n      IntegrationType: 'AWS_PROXY',\n      IntegrationUri: `arn:aws:apigateway:${\n        this.region\n      }:lambda:path/2015-03-31/functions/${arn}/invocations`\n    }\n    // integration creation overwrites existing identical integration\n    // so we don't need to check for existance\n    const res = await this.provider.request('ApiGatewayV2', 'createIntegration', params)\n    return res.IntegrationId\n  }\n\n  async addPermission(arn) {\n    const functionName = arn.split(':')[6]\n    const accountId = arn.split(':')[4]\n    const region = arn.split(':')[3]\n\n    const params = {\n      Action: 'lambda:InvokeFunction',\n      FunctionName: arn,\n      Principal: 'apigateway.amazonaws.com',\n      SourceArn: `arn:aws:execute-api:${region}:${accountId}:${this.apiId}/*/*`,\n      StatementId: `${functionName}-websocket`\n    }\n\n    return this.provider.request('Lambda', 'addPermission', params).catch((e) => {\n      if (e.providerError.code !== 'ResourceConflictException') {\n        throw e\n      }\n    })\n  }\n\n  async createRouteResponse(routeId, routeResponseKey) {\n    const params = {\n      ApiId: this.apiId,\n      RouteId: routeId,\n      RouteResponseKey: routeResponseKey\n    }\n\n    return await this.provider.request('ApiGatewayV2', 'createRouteResponse', params)\n  }\n\n  async createRoute(integrationId, route) {\n    const params = {\n      ApiId: this.apiId,\n      RouteKey: route.routeKey,\n      Target: `integrations/${integrationId}`\n    }\n    if (route.authorizer && route.authorizer.name) {\n      params.AuthorizationType = 'CUSTOM'\n      params.AuthorizerId = this.authorizers[route.authorizer.name].authorizerId\n    }\n    if (route.routeResponseSelectionExpression) {\n      params.RouteResponseSelectionExpression = route.routeResponseSelectionExpression\n    }\n\n    const res = await this.provider.request('ApiGatewayV2', 'createRoute', params).catch((e) => {\n      if (e.providerError.code !== 'ConflictException') {\n        throw e\n      }\n    })\n\n    if (route.routeResponseSelectionExpression) {\n      await this.createRouteResponse(res.RouteId, '$default')\n    }\n\n    return res\n  }\n\n  async clearAuthorizers() {\n    const res = await this.provider.request('ApiGatewayV2', 'getAuthorizers', { ApiId: this.apiId })\n    return all(\n      map(\n        (authorizer) =>\n          this.provider.request('ApiGatewayV2', 'deleteAuthorizer', {\n            ApiId: this.apiId,\n            AuthorizerId: authorizer.AuthorizerId\n          }),\n        res.Items\n      )\n    )\n  }\n\n  async createAuthorizer(authorizer) {\n    const params = {\n      ApiId: this.apiId,\n      AuthorizerType: 'REQUEST',\n      AuthorizerUri: `arn:aws:apigateway:${this.region}:lambda:path/2015-03-31/functions/${authorizer.arn}/invocations`,\n      IdentitySource: authorizer.identitySource,\n      Name: authorizer.name\n    }\n    const res = await this.provider.request('ApiGatewayV2', 'createAuthorizer', params)\n    authorizer.authorizerId = res.AuthorizerId\n  }\n\n  async createAuthorizers() {\n    const authorizerPromises = map(async (authorizerName) => {\n        const authorizer = this.authorizers[authorizerName]\n        await this.addPermission(authorizer.arn)\n        return this.createAuthorizer(authorizer)\n    }, keys(this.authorizers))\n    await all(authorizerPromises)\n  }\n\n  async clearRoutes() {\n    const res = await this.provider.request('ApiGatewayV2', 'getRoutes', { ApiId: this.apiId })\n    return all(\n      map(\n        (route) =>\n          this.provider.request('ApiGatewayV2', 'deleteRoute', {\n            ApiId: this.apiId,\n            RouteId: route.RouteId\n          }),\n        res.Items\n      )\n    )\n  }\n\n  async clearIntegrations() {\n    const res = await this.provider.request('ApiGatewayV2', 'getIntegrations', { ApiId: this.apiId })\n    return all(\n      map(\n        (integration) =>\n          this.provider.request('ApiGatewayV2', 'deleteIntegration', {\n            ApiId: this.apiId,\n            IntegrationId: integration.IntegrationId\n          }),\n        res.Items\n      )\n    )\n  }\n\n  async createRoutes() {\n    const integrationsPromises = map(async (fn) => {\n      const integrationId = await this.createIntegration(fn.arn)\n      await this.addPermission(fn.arn)\n      const routesPromises = map((route) => this.createRoute(integrationId, route), fn.routes)\n      return all(routesPromises)\n    }, this.functions)\n\n    return all(integrationsPromises)\n  }\n\n  async createDeployment() {\n    const { DeploymentId } = await this.provider.request('ApiGatewayV2', 'createDeployment', {\n      ApiId: this.apiId\n    })\n    const params = {\n      ApiId: this.apiId,\n      StageName: this.stage,\n      DeploymentId\n    }\n\n    return this.provider.request('ApiGatewayV2', 'updateStage', params).catch((e) => {\n      if (e.providerError.code === 'NotFoundException') {\n        return this.provider.request('ApiGatewayV2', 'createStage', params)\n      }\n    })\n  }\n\n  async removeWebsockets() {\n    this.init()\n    await this.getApi()\n    if (!this.apiId) {\n      return\n    }\n\n    this.serverless.cli.log(\n      `Removing Websockets API named \"${this.apiName}\" with ID \"${this.apiId}\"`\n    )\n    return this.provider.request('ApiGatewayV2', 'deleteApi', { ApiId: this.apiId })\n  }\n\n  async displayWebsockets() {\n    this.init()\n    await this.prepareFunctions()\n    if (isEmpty(this.functions)) {\n      return\n    }\n    await this.getApi()\n    const baseUrl = this.getWebsocketUrl()\n    const routes = flatten(map((fn) => fn.routes.routeKey, this.functions))\n    this.serverless.cli.consoleLog(chalk.yellow('WebSockets:'))\n    this.serverless.cli.consoleLog(`  ${chalk.yellow('Base URL:')} ${baseUrl}`)\n    this.serverless.cli.consoleLog(chalk.yellow('  Routes:'))\n    map((route) => this.serverless.cli.consoleLog(`    - ${baseUrl}${route}`), routes)\n  }\n}\n\nmodule.exports = ServerlessWebsocketsPlugin\n"],"file":"index.js"}